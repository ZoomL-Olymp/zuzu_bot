import os
import pandas as pd
from aiogram import Router, types, F, Bot  # –î–æ–±–∞–≤–ª–µ–Ω Bot –≤ –∏–º–ø–æ—Ä—Ç
from aiogram.filters import CommandStart
from aiogram.types import Message
from db.database import save_website_data, init_db
from utils import clean_price_string


router = Router()
TEMP_FILE_PATH = "data/temp_file.xlsx"

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∞–π—Ç–∞—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
                         "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'title' - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'url' - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'xpath' - XPath –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ü–µ–Ω–æ–π")

@router.message(F.document)
async def handle_document(message: types.Message, bot: Bot): # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞
    if message.document.file_name.endswith(('.xls', '.xlsx')):
        try:
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            await bot.download_file(file_path, TEMP_FILE_PATH)

            df = pd.read_excel(TEMP_FILE_PATH)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['title', 'url', 'xpath']
            for col in required_columns:
                if col not in df.columns:
                    await message.answer(f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '{col}'.")
                    os.remove(TEMP_FILE_PATH)
                    return

            # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            output_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n"
            for index, row in df.iterrows():
                output_text += f"<b>{row['title']}</b>\n"
                output_text += f"URL: {row['url']}\n"
                output_text += f"XPath: {row['xpath']}\n\n"
            await message.answer(output_text, parse_mode="HTML")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            websites_data = df.to_dict('records')
            save_website_data(websites_data)
            await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            os.remove(TEMP_FILE_PATH)

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            if os.path.exists(TEMP_FILE_PATH):
                os.remove(TEMP_FILE_PATH)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls, .xlsx).")