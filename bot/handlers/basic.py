import os
import pandas as pd
import sqlite3
from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message
from db.database import save_website_data, get_all_websites  # Assuming you have a get_all_websites function
from typing import Optional
from parser.parser import get_average_prices


router = Router()
TEMP_FILE_PATH = "data/temp_file.xlsx"  # Consider making this configurable

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    Handles the /start command.  Provides a welcome message and instructions.
    """
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∞–π—Ç–∞—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
                         "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'title' - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'url' - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç\n"
                         "- –ö–æ–ª–æ–Ω–∫–∞ 'xpath' - XPath –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ü–µ–Ω–æ–π")

@router.message(F.document)
async def handle_document(message: types.Message, bot: Bot, conn: Optional[sqlite3.Connection] = None):
    """
    Handles document messages, expecting an Excel file (.xls, .xlsx).

    Downloads the file, validates its format, saves website data to the database,
    parses the websites, and sends the average prices back to the user.

    Args:
        message: The incoming message object.
        bot: The Bot instance.
        conn: An optional SQLite connection.  If None, a temporary connection will be created
            (and closed) within this function.  This allows the function to be used
            either with an existing connection (for a transaction) or standalone.
    """
    if message.document.file_name.endswith(('.xls', '.xlsx')):
        try:
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            await bot.download_file(file_path, TEMP_FILE_PATH)

            df = pd.read_excel(TEMP_FILE_PATH)

            required_columns = ['title', 'url', 'xpath']
            if not all(col in df.columns for col in required_columns):
                missing_cols = [col for col in required_columns if col not in df.columns]
                await message.answer(f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}.")
                os.remove(TEMP_FILE_PATH)  # Clean up even on error
                return

            # Check if DataFrame is empty after reading
            if df.empty:
                await message.answer("–§–∞–π–ª Excel –ø—É—Å—Ç. –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                return

            # Display the content of the file (for verification)
            output_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n"
            for _, row in df.iterrows():  # Use _ for unused index variable
                output_text += f"<b>{row['title']}</b>\n"  # Use HTML for bold title
                output_text += f"URL: {row['url']}\n"
                output_text += f"XPath: {row['xpath']}\n\n"
            await message.answer(output_text, parse_mode="HTML")

            websites_data = df.to_dict('records')  # Convert DataFrame to list of dictionaries
            save_website_data(websites_data, conn)  # Save to database (using provided or temporary connection)
            await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            # --- PARSING ---
            await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤...")
            try:
                website_averages = get_average_prices(websites_data)  # Get average prices

                output_prices = "–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–∞–π—Ç–∞–º:\n\n"
                for title, average_price in website_averages.items():
                    if average_price is not None:
                        output_prices += f"<b>{title}</b>: {average_price:.2f}\n"  # Format price to 2 decimal places
                    else:
                        output_prices += f"<b>{title}</b>: –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"  # Indicate if price was not found
                await message.answer(output_prices, parse_mode="HTML")  # Use HTML for bold title

            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            # Always remove the temporary file, even if an error occurred
            if os.path.exists(TEMP_FILE_PATH):
                os.remove(TEMP_FILE_PATH)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls, .xlsx).")

@router.message(F.command.in_(["/help"]))
async def command_help_handler(message: Message) -> None:
    """
    Handles the /help command.  Provides detailed instructions on using the bot.
    """
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å Excel —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –ø–∞—Ä—Å–∏—Ç —Ü–µ–Ω—ã —Å —ç—Ç–∏—Ö —Å–∞–π—Ç–æ–≤ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É.\n\n"
                         "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                         "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é.\n"
                         "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'title', 'url', 'xpath'.\n"
                         "3. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≤—ã–≤–µ–¥–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã.")